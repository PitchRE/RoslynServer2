<?php

/**
 * Defines the state, nature, or further qualification of an EventType.
 * This is the "how" or "current status" of the "what".
 */
enum EventQualifier: string
{
    // --- General States for Alarms/Troubles ---
    case ACTIVATION = 'activation';         // The initial occurrence or trigger of an event/alarm/fault. (Replaces NEW_EVENT)
    case RESTORAL = 'restoral';           // The event/alarm/fault has returned to its normal state.
    case CONDITION_UPDATE = 'condition_update'; // An update on an existing, ongoing condition (e.g., CID qualifier 6).
    case ACKNOWLEDGED = 'acknowledged';       // Event has been acknowledged by a system or user but may still be active.

    // --- System State Qualifiers ---
    case SYSTEM_SECURED = 'system_secured';     // System or partition is now in an armed/secured state.
    case SYSTEM_UNSECURED = 'system_unsecured';   // System or partition is now in a disarmed/unsecured state.
    case BYPASS_ACTIVE = 'bypass_active';       // A bypass is currently active.
    case BYPASS_INACTIVE = 'bypass_inactive';     // A bypass is no longer active.
    case PROGRAMMING_MODE_ACTIVE = 'programming_mode_active'; // System is in programming mode.
    case PROGRAMMING_MODE_INACTIVE = 'programming_mode_inactive';// System is out of programming mode.

    // --- Test State Qualifiers ---
    case TEST_STARTED = 'test_started';         // A test procedure has begun.
    case TEST_COMPLETED_SUCCESS = 'test_completed_success';// Test finished successfully.
    case TEST_COMPLETED_FAIL = 'test_completed_fail';  // Test finished with failures.
    case TEST_ABORTED = 'test_aborted';         // Test was aborted before completion.

    // --- Supervisory/Rule-Based Qualifiers ---
    case SCHEDULE_VIOLATION = 'schedule_violation';// A scheduled action was not met (e.g., late to arm).
    case EXPECTED_EVENT_MISSED = 'expected_event_missed';// An expected periodic signal was not received.
    case THRESHOLD_EXCEEDED = 'threshold_exceeded';  // A monitored value crossed a defined threshold.

    // --- Action/Origin Qualifiers ---
    case USER_INITIATED = 'user_initiated';       // Action performed directly by an end-user.
    case SYSTEM_INITIATED_AUTO = 'system_initiated_auto';// Action performed automatically by the panel/system schedule.
    case CSR_INITIATED_AUTO = 'csr_initiated_auto';  // Action/event generated by CSR backend logic.
    case OPERATOR_INITIATED = 'operator_initiated'; // Action initiated by a CSR operator.

    // --- Informational/Severity Qualifiers ---
    case INFORMATION_ONLY = 'information_only';   // Event is purely informational, no immediate action.
    case WARNING = 'warning';               // A warning condition that may precede a fault or alarm.
    case CRITICAL_IMPACT = 'critical_impact';     // Event has critical operational impact.
    case MINOR_IMPACT = 'minor_impact';         // Event has minor operational impact.

    // --- Access Control Specifics ---
    case ACCESS_AUTHORIZED = 'access_authorized';   // Access was legitimate.
    case ACCESS_UNAUTHORIZED_ATTEMPT = 'access_unauthorized_attempt';// Attempted access was not legitimate.
    case ACCESS_FORCED = 'access_forced';         // Physical force used.
    case ACCESS_TIMEOUT = 'access_timeout';       // E.g., door held open too long.

    // --- Generic/Fallback ---
    case NONE = 'none';                   // No specific qualifier applies or needed.
    case UNKNOWN = 'unknown';               // Qualifier could not be determined.
}