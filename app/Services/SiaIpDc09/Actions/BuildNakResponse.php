<?php

declare(strict_types=1);

namespace App\Services\SiaIpDc09\Actions;

use App\Support\Crc\Contracts\CrcCalculator as CrcCalculatorContract;
use Carbon\CarbonImmutable;
use Illuminate\Support\Facades\Log; // To ensure we work with UTC

// If using lorisleiva/laravel-actions:
// use Lorisleiva\Actions\Concerns\AsAction;

class BuildNakResponse
{
    // If using lorisleiva/laravel-actions:
    // use AsAction;

    private const LF = "\n"; // 0x0A

    private const CR = "\r"; // 0x0D

    // Fixed components for NAK response as per Spec 5.5.3.2
    private const NAK_TOKEN = '"NAK"';

    private const NAK_SEQUENCE = '0000';

    private const NAK_RECEIVER = 'R0';

    private const NAK_PREFIX = 'L0';

    private const NAK_ACCOUNT = 'A0'; // Note: Spec shows A0 (not #A0) for NAK context

    private const NAK_DATA_BRACKETS = '[]';

    private CrcCalculatorContract $crcCalculator;

    public function __construct(CrcCalculatorContract $crcCalculator)
    {
        $this->crcCalculator = $crcCalculator;
    }

    /**
     * Builds a SIA DC-09 NAK (Negative Acknowledge) response string.
     * Used primarily for timestamp-related errors. NAKs are never encrypted.
     *
     * @param  string  $correctiveTimestamp  The correctly formatted timestamp string representing the
     *                                       CSR's current GMT/UTC time (_HH:MM:SS,MM-DD-YYYY).
     *                                       This should ideally be passed from the point where NAK was decided
     *                                       (e.g., from TimestampInvalidException or generated by HandleMessage/DetermineSiaResponse).
     * @return string The full binary NAK response frame string.
     */
    public function handle(string $correctiveTimestamp): string
    {
        // Basic validation of the input timestamp format might be prudent
        if (! str_starts_with($correctiveTimestamp, '_') || strlen($correctiveTimestamp) !== 20) {
            Log::error('BuildNakResponse received an incorrectly formatted corrective timestamp. Using current time as fallback.', ['invalid_timestamp' => $correctiveTimestamp]);
            // Fallback to current time if provided one is bad
            $correctiveTimestamp = CarbonImmutable::now('UTC')->format('\_H:i:s,m-d-Y');
        }

        $logContext = ['corrective_timestamp' => $correctiveTimestamp];

        // Construct the body part for CRC/Length calculation
        // "NAK"0000R0L0A0[]_HH:MM:SS,MM-DD-YYYY
        $body = self::NAK_TOKEN
            .self::NAK_SEQUENCE
            .self::NAK_RECEIVER
            .self::NAK_PREFIX
            .self::NAK_ACCOUNT // Spec uses A0 here
            .self::NAK_DATA_BRACKETS
            .$correctiveTimestamp;

        // Calculate CRC using the injected calculator (expecting CCITT-FALSE)
        $crc = $this->crcCalculator->handle($body);
        $crcHeaderLength = $this->crcCalculator->getHexStringLength(); // Should be 4

        // Calculate Length Header (0LLL format)
        $bodyLength = strlen($body);
        $lengthHex = str_pad(strtoupper(dechex($bodyLength)), 3, '0', STR_PAD_LEFT);
        $lengthHeader = '0'.$lengthHex;

        // Assemble the final frame (Binary)
        $frame = self::LF.$crc.$lengthHeader.$body.self::CR;

        $logContext['built_response_type'] = 'NAK';
        $logContext['response_frame_length'] = strlen($frame);

        Log::debug('Built NAK response', $logContext);

        return $frame;
    }
}
