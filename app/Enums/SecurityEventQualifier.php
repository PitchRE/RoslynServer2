<?php

// app/Enums/EventQualifier.php

namespace App\Enums;

enum SecurityEventQualifier: string
{
    // --- Core Event States (Primary for Alarms, Troubles, Faults) ---
    case ACTIVATION = 'activation';
    // Description: The initial trigger, detection, or occurrence of an event (e.g., an alarm sensor activating, a fault being detected).
    // Implies: This is the "new" state for many critical events.

    case RESTORAL = 'restoral';
    // Description: The condition that triggered an event has returned to its normal, non-alarm, or non-fault state.
    // Implies: The immediate threat or issue may have passed, but acknowledgment and logging are usually still required.

    case CONDITION_PERSISTS = 'condition_persists';
    // Description: An update indicating a previously reported fault or trouble condition is still active and has not yet been restored. (e.g., Contact ID qualifier 6).
    // Implies: The problem remains; may affect how restorals are handled or if repeated notifications are needed.

    // --- System Operational States (Primarily for Arm/Disarm, Bypasses, Programming) ---
    case SYSTEM_SECURED_ARMED = 'system_secured_armed';
    // Description: The security system or a specific partition has transitioned to an armed or secured state.
    // Implies: System is now actively monitoring for intrusions/events.

    case SYSTEM_UNSECURED_DISARMED = 'system_unsecured_disarmed';
    // Description: The security system or a specific partition has transitioned to a disarmed or unsecured state.
    // Implies: System is no longer actively monitoring in the same way; authorized access is expected.

    case BYPASS_ACTIVATED = 'bypass_activated';
    // Description: One or more zones/sensors have been intentionally excluded from monitoring.
    // Implies: Reduced protection in the bypassed areas.

    case BYPASS_DEACTIVATED = 'bypass_deactivated';
    // Description: Previously bypassed zones/sensors are now back in an active monitoring state.
    // Implies: Protection restored to those areas.

    case PROGRAMMING_MODE_ENTERED = 'programming_mode_entered';
    // Description: The security system has entered user or installer programming mode.
    // Implies: System is temporarily not monitoring normally; changes to configuration may occur.

    case PROGRAMMING_MODE_EXITED = 'programming_mode_exited';
    // Description: The security system has exited programming mode and returned to normal operation.
    // Implies: Configuration changes (if any) are complete.

    // --- Test Procedure States ---
    case TEST_INITIATED = 'test_initiated';
    // Description: A test procedure (manual, automatic, walk-test) has been started.
    // Implies: Events generated during this period may be part of the test.

    case TEST_COMPLETED_PASS = 'test_completed_pass';
    // Description: A test procedure has finished, and all tested components/paths functioned correctly.
    // Implies: System health confirmed for tested aspects.

    case TEST_COMPLETED_FAIL = 'test_completed_fail';
    // Description: A test procedure has finished, but one or more components/paths failed the test.
    // Implies: Requires investigation and likely maintenance.

    case TEST_IN_PROGRESS = 'test_in_progress';
    // Description: A test (often a periodic communication test or walk test) is currently active.
    // Implies: System is in a special mode; alarms might be suppressed or logged differently.

    case TEST_ABORTED = 'test_aborted';
    // Description: A test procedure was stopped before completion.
    // Implies: Test results are incomplete.

    // --- Origin or Cause Qualifiers ---
    case USER_INITIATED_ACTION = 'user_initiated_action';
    // Description: The event was directly caused by an action taken by an end-user (e.g., manual arm, panic button press).
    // Implies: Human involvement as the trigger.

    case SYSTEM_AUTOMATED_ACTION = 'system_automated_action';
    // Description: The event was triggered by an automated process within the client's security panel/system (e.g., auto-arm by schedule, auto-test).
    // Implies: Pre-programmed system behavior.

    case CSR_AUTOMATED_SUPERVISION = 'csr_automated_supervision';
    // Description: The event was generated by the CSR's backend logic due to supervising a client system (e.g., failure to arm, missed comm test).
    // Implies: Anomaly detected by CSR monitoring.

    case ENVIRONMENTAL_TRIGGER = 'environmental_trigger';
    // Description: The event was likely caused by environmental factors (e.g., storm, animal, power surge affecting sensors).
    // Implies: May help in assessing false alarm likelihood.

    // --- Access Control Specific Qualifiers ---
    case ACCESS_AUTHORIZED_VALID = 'access_authorized_valid';
    // Description: Access was granted based on valid credentials or authorization.
    // Implies: Normal, expected access.

    case ACCESS_DENIED_INVALID = 'access_denied_invalid';
    // Description: Access was attempted but denied due to invalid credentials or lack of authorization.
    // Implies: Potential unauthorized attempt or user error.

    case ACCESS_FORCED_TAMPER = 'access_forced_tamper';
    // Description: Physical force or tampering was detected at an access point (e.g., door forced open).
    // Implies: A security breach at an access point.

    case ACCESS_DURATION_EXCEEDED = 'access_duration_exceeded';
    // Description: An access point (e.g., door) was left open longer than the permitted time.
    // Implies: Potential security lapse (door propped).

    // --- Informational / Update Qualifiers ---
    case INFORMATION_REPORT = 'information_report';
    // Description: The event serves primarily as an informational update rather than an immediate alert or fault.
    // Implies: For logging and context, generally low urgency.

    case STATUS_UPDATE = 'status_update';
    // Description: Provides an update on an ongoing situation or system status without being a new activation or restoral itself.
    // Implies: Contextual information for an existing event or monitored entity.

    // --- Severity / Impact Qualifiers (Can overlap with Priority but adds context) ---
    case IMPACT_CRITICAL = 'impact_critical';
    // Description: The event has a critical impact on security or system operation.
    // Implies: Complements priority, indicating severe consequences.

    case IMPACT_MAJOR = 'impact_major';
    // Description: The event has a major impact.
    // Implies: Significant consequences.

    case IMPACT_MINOR = 'impact_minor';
    // Description: The event has a minor or limited impact.
    // Implies: Less severe consequences.

    // --- Generic / Fallback ---
    case NOT_APPLICABLE = 'not_applicable';
    // Description: No specific qualifier is relevant or necessary for this event type beyond what the EventType itself conveys.
    // Implies: The EventType is self-sufficient in describing its nature.

    case UNKNOWN_QUALIFIER = 'unknown_qualifier';
    // Description: The specific nature or state of the event could not be determined by the parsing/mapping logic.
    // Implies: Requires manual review to fully understand the event.

    /**
     * Provides a human-readable label for the qualifier.
     */
    public function label(): string
    {
        return match ($this) {
            self::ACTIVATION => 'Activation / New Event',
            self::RESTORAL => 'Restoral / Cleared',
            self::CONDITION_PERSISTS => 'Condition Persists',
            self::SYSTEM_SECURED_ARMED => 'System Secured/Armed',
            self::SYSTEM_UNSECURED_DISARMED => 'System Unsecured/Disarmed',
            self::BYPASS_ACTIVATED => 'Bypass Activated',
            self::BYPASS_DEACTIVATED => 'Bypass Deactivated',
            self::PROGRAMMING_MODE_ENTERED => 'Programming Mode Entered',
            self::PROGRAMMING_MODE_EXITED => 'Programming Mode Exited',
            self::TEST_INITIATED => 'Test Initiated',
            self::TEST_COMPLETED_PASS => 'Test Completed - Pass',
            self::TEST_COMPLETED_FAIL => 'Test Completed - Fail',
            self::TEST_IN_PROGRESS => 'Test in Progress',
            self::TEST_ABORTED => 'Test Aborted',
            self::USER_INITIATED_ACTION => 'User Initiated Action',
            self::SYSTEM_AUTOMATED_ACTION => 'System Automated Action',
            self::CSR_AUTOMATED_SUPERVISION => 'CSR Automated Supervision',
            self::ENVIRONMENTAL_TRIGGER => 'Environmental Trigger',
            self::ACCESS_AUTHORIZED_VALID => 'Access Authorized',
            self::ACCESS_DENIED_INVALID => 'Access Denied',
            self::ACCESS_FORCED_TAMPER => 'Access Forced/Tamper',
            self::ACCESS_DURATION_EXCEEDED => 'Access Duration Exceeded (e.g., Door Held)',
            self::INFORMATION_REPORT => 'Information Report',
            self::STATUS_UPDATE => 'Status Update',
            self::IMPACT_CRITICAL => 'Critical Impact',
            self::IMPACT_MAJOR => 'Major Impact',
            self::IMPACT_MINOR => 'Minor Impact',
            self::NOT_APPLICABLE => 'Not Applicable',
            self::UNKNOWN_QUALIFIER => 'Unknown Qualifier',
        };
    }

    /**
     * Checks if the qualifier indicates an initial activation or new problem.
     */
    public function isActivationOrFault(): bool
    {
        return in_array($this, [
            self::ACTIVATION,
            self::ACCESS_FORCED_TAMPER, // This is an activation of a breach
            // Potentially add others that signify a new problem state
        ]);
    }

    /**
     * Checks if the qualifier indicates a return to a normal state.
     */
    public function isReturnToNormal(): bool
    {
        return in_array($this, [
            self::RESTORAL,
            self::SYSTEM_SECURED_ARMED, // Return to normal secured state
            self::BYPASS_DEACTIVATED,   // Return to normal zone monitoring
            self::PROGRAMMING_MODE_EXITED, // Return to normal operation
        ]);
    }
}
